:HIDE:
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
# #+SETUPFILE: /home/hxz/gitdown/org-html-themes/setup/theme-readtheorg-local.setup
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>

# no default toc at all
# #+OPTIONS: toc:2
#+OPTIONS: p:2

# only number at level 2
#+OPTIONS: H:3

# can use colors,date,email,.....
#+INCLUDE: "~/gitdown/org-macros/org-macros.setup"

#+COLUMNS: %7TODO(To Do) %40ITEM(TASK) %TAGS(Tags) %6CLOCKSUM(Clock) %8Effort(Effort){:}
#+PROPERTIES: Effort_ALL 0:15 0:30 0:45 1:00 1:30 2:00
#+PROPERTIES: Rating_ALL + ++ +++ ++++ +++++
#+SEQ_TODO: NEXT(n/!) TODO(t@/!) WAITING(w) FAILED(f) SCRATCH(s@/!) Q:(q) | DONE(d@) CANCELLED(c@) MORE(m) 
#+TAGS: REVIEW(r) SHORTCUT(s) ADVANCED(a) USEFUL(u) NORMAL(n) BASIC(b) FUTURE(f)
#+ARCHIVE: myarchive.org::
#+OPTIONS: d:t p:t todo:nil tags:nil
#+STARTUP: align

#+AUTHOR:hexinzheng
#+TITLE: EMACS NOTES

#+LATEX_COMPILER: xelatex
#+LATEX_CLASSOPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \usepackage{CJK}
#+LATEX_HEADER: \usepackage{ctex}
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage[hidelinks]{hyperref}
#+LATEX_HEADER: \usepackage[bibstyle=gb7714-2015,
#+LATEX_HEADER:     citestyle=gb7714-2015,
#+LATEX_HEADER:     backend=biber,
#+LATEX_HEADER:     backref=true,
#+LATEX_HEADER:     seconds=true,
#+LATEX_HEADER:     sorting=none]{biblatex}
#+LATEX_HEADER: \addbibresource{../main.bib}

# 配置仿宋字体
#+LATEX_HEADER: \newCJKfontfamily[fsong]\myfsong{FangSong}
#+LATEX_HEADER: \newCJKfontfamily[fhei]\myheiti{SimHei}
#+LATEX_HEADER: \newCJKfontfamily[fzxiaobiao]\myfzxiaobiao{方正小标宋_GBK}
#+LATEX_HEADER: \newCJKfontfamily[ftimes]\mytimes{Times New Roman}

# 主要字体族
#+LATEX_HEADER: \setCJKmainfont[AutoFakeBold]{SimSun}
#+LATEX_HEADER: \setCJKsansfont[AutoFakeBold]{SimHei}
#+LATEX_HEADER: \setmainfont{Times New Roman}
#+LATEX_HEADER: \setsansfont{Arial}

# 页面配置
#+LATEX_HEADER: \geometry{
#+LATEX_HEADER:   paper      = a4paper,
#+LATEX_HEADER:   vmargin    = 2.54cm,
#+LATEX_HEADER:   left       = 2.5cm,
#+LATEX_HEADER:   right      = 2cm,
#+LATEX_HEADER:   headheight = 0.75cm,
#+LATEX_HEADER:   headsep    = 0.29cm,
#+LATEX_HEADER:   footskip   = 0.79cm,
#+LATEX_HEADER: }

#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:     colorlinks=true,
#+LATEX_HEADER:     pdfstartview=FitH,
#+LATEX_HEADER:     linkcolor={blue!50!black},
#+LATEX_HEADER:     anchorcolor=violet,
#+LATEX_HEADER:     citecolor=magenta}
:END:

* 问题
- [X] org 转换为标准 latex 文件
- [X] org 输出为 html 文件
- [ ] 使用 github 样式显示文件
- [ ] 在 github 上建立自己的站点
- [X] 默认浏览器改为 qutebrowser
- [X] 安装 emacs 26.1 。主要是 emacs-26-non-common-dfsg.
- [ ] Open org-mode html in EWW.

* 调试脚本
- 单独加载另外一个 emacs 的初始化文件
#+begin_src bash
emacs -q -l ~/youemacs.el
emacs --no-initial-file --load-file=~/youemacs.el
#+end_src

- 调试 elisp 语言,@@html:<kbd>@@ , ' @@html:</kbd>@@ ，或是@@html:<kbd>@@ M-x
  @@html:</kbd>@@ ielm 。

* 澄清概念
**** 组合键的术语是 Command， 而不是 ShortCut
     例如，搜索插入文件变量的组合键，关键词应为 _command file variable emacs_
     。如使用 _shortcut ..._ 则无法找到有用结果。
* 重要概念
** 屏幕（Screen）
   Emacs 的显示区域称为 Frame ， 在 Frame 中可包含多个 Windows。 Emacs 中 Frame 在 IDE 中称为 Windows， 而 Emacs 的 Windows 在 IDE 中称为 View。
*** Point
    称为输入提示符号。通过 Cursor 可以改变输入符号的显示。
*** Echo Area
    显示输入命令的区域。Display Custom 修改 Echo Area。Echo Area 用于显示 Minibuffer。退出 Minibuffer 命令是 C-g。
*** Mode Line
    窗口底部是 Mode Line，显示当前 buffer 状态。Mode Line 文本格式如下

    | cs | ch-fr | buf | pos | line | (major | minor) |

    以下是详细解释

    | cs             | Coding System 的缩写。C-h C unix 给出 unix coding 的具体信息。 C-h C uft-8 给出 utf-8 coding 的具体信息。               |
    | ch             | 表示文件是否保存。 * 表示文件未保存， - 表示文件已保存，% 表示为只读文件。                                              |
    | fr             | Frame 缩写。 F1 为第 1 个 Frame，F2 为第 2 个 Frame。                                                                   |
    | buf            | Buffer name，即当前 Buffer 中文件名。                                                                                   |
    | pos            | 当前 Buffer 中显示的文件位置。 Top 靠近文件首部， Bot 靠近文件尾部， All 显示了全部文件，nn% 以百分比形式指出显示位置。 |
    | line           | 18:10 表示 第 18 行第 10 个字符位置。                                                                                   |
    | major          | 主编辑模式，如 Text mode，Lisp mode，Latex mode 等。                                                                    |
    | minor          | 次编辑模式，可附加到主编辑模式之后。                                                                                    |
    | recursive edit | [...] 表示处于循环编辑模式。                                                                                            |

** 用户输入（User input）
   Emacs 主要设计目的是通过键盘与用户交互，当然 Emacs 也使用鼠标，但这不是设计的出发点。 因而要能熟练使用键盘快捷键操作和编辑文件。
** 输入键 （Keys）
   Key 和其组合键会引发 key event。如果一组 Key 引发一条命令，称为 Complete Key。 如果无法触发命令，称为 Prefix key，如 C-x 和 M-x。
** 命令 （Command）
   每条命令是一个 Lisp 函数。 将命令与组合键绑定在一起称为 Keymaps。 C-n 之所以能跳到下一行，是因为绑定了函数 next-line。
** 进入 Emacs
   如果 inhibit-startup-screen 为 non-nil 将不会显示欢迎界面，而直接进入到 *scratch* 文件，在其中能运行一些待测试的 Lisp 程序。

   如果希望启动 Emacs 时，进入到某个目录或是打开特定文件，可配置 initial-buffer-choice 。
** 退出 Emacs
   C-x C-x 退出 Emacs (save-buffers-kill-terminal)
   C-z     Emacs 最小化 (suspend-frame)
   M-x kill-emacs 退出 Emacs，不需要任何提示

   Emacs 能在退出时保存当前会话 Session，下次启动后可先加载此会话。
* 基本编辑命令
** 基础
*** 插入文本 (Insert Text)
    ~C-j~ [O] 插入新的空行，新行没有 auto-indent 。 在 Minor Mode 中， 可以改变插入方式。 例如， ~Auto Fill Mode~ 可自动截取超出长度的文本(参见 Filling)。

    如要插入非图形化字符，先输入 ~C-q~ (quoted-insert)
    + 输入 DEL 。 ~C-q~ 后，紧接着输入 <DEL>。
    + 输入 Unicode。 ~C-q 1 0 1 B~ 显示 AB。
    
    ~read-quoted-char-radix~ 控制基数，如果为 10 表示十进制，如果为 16 表示十六进制。

    Unicode 字符还可以通过 ~C-x 8~ 命令插入， ~C-x 8 C-h~ 查看具体插入 Unicode 字符的命令。 例如， ~C-x 8 $~ 插入字符  ¤ 。
    或者 ~C-x 8 <RET>~ 会列出所有 Unicode 可用字符。 例如，输入 lambda ，找到对应命令 ~Greek Small Letter Lambda~ 就能插入 λ 。
    
*** 移动光标 (Move Point)
    我使用 Evil-mode 所以不太用这些操作。

*** 删除 (Erasing)
    | Emacs       | Function             | Evil |
    |-------------+----------------------+------|
    | <DEL>       | delete-forward-char  | x    |
    | <BACKSPACE> | delete-backward-char | X    |
    | ~C-d~       | delete-char          | x    |
    | ~C-k~       | kill-line            | dd   |
    | ~M-d~       | kill-word            | D    |

*** 基本撤销 (Basic Undo)
    
    | Emacs   | Function | Evil |
    | ~C-x u~ | undo     | u    |
    | ~M-x _~ | redo     |      |
*** 文件 (Files)
    
    | Emacs     | Function    | Evil |
    | ~C-x C-f~ | find-file   |      |
    | ~C-x C-s~ | save-buffer |      |
    
*** 帮助 (Help)
    简单，直接 ~C-h~ 即可。

*** 空行 (Blank Lines)
    
    | Emacs     | Function           | Evil   |
    | ~C-x C-o~ | delete-blank-lines | 类似 J |
    | ~C-o~     | open-line          | o      |
    
*** 连续行 (Continuation Lines)

    :PROPERTIES:
    :ID:       0500a5b8-4fdb-4b52-9beb-472db7ab2bda
    :END:
    
    在新版 org-mode (>9.0) 中， 不再使用 ~<s tab~ 插入代码。Easy template 换为了 ~C-c C-,~ 。

    在 org-mode 中，插入按键顺序的命令@@html:<kbd>@@ SPC m i k @@html:</kbd>@@ 。
      
#+CAPTION: 使用@@html:<kbd>@@ SPC t l @@html:</kbd>@@ 启用 line truncation
#+NAME:   fig:trunc1
   [[./pic/trunc1.png]]

*** 位置信息 (Position Info)
*** 参数 (Arguments)
*** 重复 (Repeating)
** Minibuffer
** M-x
** 帮助(help)
* org-mode
** Agenda Views
   Todo items 、 time-stamped items 和 tagged headlines 可能分布在不同的文件中。
   有时为了能将这些信息搜集、整理并按照要求提取信息，在特定 buffer 中显示，这种
   方式称为 Agenda。
*** Agenda Files
    ~org-agenda-files~ 存放 agenda 文件指定位置，通常是配置为目录，该目录下所
    有 .org 文件都是 agenda 文件。 如果只有一个 agenda 文件就必须明确给出文件名。
#+begin_src Org
  (setq org-agenda-files (list "~/gitdown/MyThrougth/mytime.org"))
#+end_src

    因此 agenda 是由一组 org 文件构成的，依次读取每个文件内容，搜集文件信息。
    比较便捷的方式是直接用命令@@html:<kbd>@@ C-c [ @@html:</kbd>@@ 把当前文件
    添加到 agenda 中 ，@@html:<kbd>@@ C-c ] @@html:</kbd>@@ 已修改为在当前文件
    中插入 Bibtex 引用。因此，要使用 org-remove-file 命令直接从 agenda 文件中
    移除当前 org 文件。@@html:<kbd>@@ C-c , @@html:</kbd>@@ 循环访问 agenda 文件。


 # Local Variables:
 # fill-column: 78
 # End:

** Document Structure
*** Headlines
    | local visible cycling  | @@html:<kbd>@@ <tab> @@html:</kbd>@@                                           |
    | global visible cycling | @@html:<kbd>@@ <backtab> @@html:</kbd>@@                                       |
    | move up/down           | @@html:<kbd>@@ <M-up> @@html:</kbd>@@ /@@html:<kbd>@@ <M-down> @@html:</kbd>@@ |
** ToDo Items
**** Basic
** Datetimes
   ToDo items 可以标记 date 和 time， 在 org 中称之为 timestamp。
*** Timestamps
    时间戳分类
**** 普通时间戳；事件；约会
     只分配 date/time 形式的时间戳，在显示 agenda 时，只显示 date。
***** 周六看电影<2019-11-30 Sat>
***** 周四吃晚餐<2019-11-28 Thu> 
**** 规律重复出现的时间戳       
     如每天下午 5 点跑步，每周六去公园玩，每年的生日等。
     *d* 表示 day， *w* 表示 week ， *m* 表示 month。
**** 用 sexp 表示复杂日期
     牵涉到 LISP 语言中的 S-exp 表达式，暂不考虑。可以用来安排课程表。 
**** 指定 Time/Date 范围
     由 ~--~ 连接的两个日期表示范围。
***** 论文答辩<2019-12-10 Tue>--<2019-12-13 Fri>      
**** 非激活日期
     由 ~[ ]~ 包含的日期，并不会出现在 agenda 中。
***** 和朋友聚餐 [2019-11-28 Thu] 
*** 创建时间戳
    | @@html:<kbd>@@ C-c . @@html:</kbd>@@                                            | 插入日期/连续日期                  |
    | @@html:<kbd>@@ C-c ! @@html:</kbd>@@                                            | 插入非激活日期                     |
    | @@html:<kbd>@@ C-c < @@html:</kbd>@@                                            | 插入当前日期                       |
    | @@html:<kbd>@@ C-c C-o @@html:</kbd>@@                                          | 列出光标下日期/日期范围中的 agenda |
    | @@html:<kbd>@@ <S-right> @@html:</kbd>@@@@html:<kbd>@@ <S-left> @@html:</kbd>@@ | 调整月份                           |
    | @@html:<kbd>@@ <S-up> @@html:</kbd>@@@@html:<kbd>@@ <S-down> @@html:</kbd>@@    | 调整天数                           |
    | @@html:<kbd>@@ C-c C-y @@html:</kbd>@@                                          | 计算有多少天                       |
*** Deadlines 和 Scheduling
    时间戳可配置特殊关键字帮助进行计划，例如 Deadlines 和 Scheduling。

    使用@@html:<kbd>@@ C-c / @@html:</kbd>@@  会出现 sparse tree。

**** DEADLINE
      所有 DEADLINE 日期之前计划的事件都会显示在 agenda 中，
      ~org-deadline-warning-days~ 指定 DEADLINE 日期之前几天发出警告，直到将事
      件标志为 DONE 才会停止提示警告。
***** DONE 完成课程教案编写工作
#+begin_src orgmode
      DEADLINE:<2019-11-30 Sat>
      第一次编辑:[[bbdb:Ford Prefect]]
#+end_src

     使用 ~-2d~ 表示提前 2 天发出警告提示。
***** TODO 与张总见面约谈
#+begin_src orgmode
      DEADLINE:<2019-11-30 Sat -2d> 
#+end_src
      
      重复某个 Deadlines，使用 ~+1m~ 表示每月重复一次，~-2d~ 表示提前 2 天提示。
      当本月任务完成后，再次使用@@html:<kbd>@@ C-c C-t @@html:</kbd>@@ 不但能
      标记本月任务已经完成，而且还能启用下月任务。 凡是标记为 DONE 的任务不再
      出现在 agenda 中。
***** DONE 交房租
#+begin_src orgmode
      DEADLINE: <2019-08-15 Thu +1m -2d>
      :PROPERTIES:
      :LAST_REPEAT: [2019-11-28 Thu 15:27]
      :END:
#+end_src

***** DONE 与 Scott 老师视频通话
#+begin_src orgmode
      SCHEDULED: <2019-10-25 Fri ++1w>
      :PROPERTIES:
      :LAST_REPEAT: [2019-11-28 Thu 15:26]
      :END:
#+end_src
**** SCHEDULED
     计划何时开始某项新任务。如果延迟两天才开始该任务，则显示为 ~2x~ 。如果计
     划推迟 3 天，则在时间上使用 ~-3d~ 表示。

     SCHEDULED 经常会被误解。 例如，与某人约会是 appointment，使用简单的计划即
     可。 一旦使用 SCHEDULED , 则表示在该任务在指定日期才会在时间线中出现。
***** DONE 去新加坡旅行     
#+begin_src orgmode
      SCHEDULED:<2019-11-24 Sun --2d> 
#+end_src

* [[https://www.youtube.com/watch?v=d6iY_1aMzeg&list=PLX2044Ew-UVVv31a0-Qn3dA6Sd_-NyA1n][Uncle Dave Emacs]]
** DONE Package and which key                                        :BASIC:
   CLOSED: [2020-02-15 Sat 22:20]
   :PROPERTIES:
   :Attachments: Emacs%20Tutorial%203%20-%20Packages%20and%20which-key..mp4
   :ID:       6e227b02-94de-4517-aa46-484789e41e39
   :Effort:   0:20
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-15 Sat 09:28]--[2020-02-15 Sat 10:11] =>  0:43
   :END:

   Reload init.el file by following methods
   - ~M-x eval-buffer~
   - ~M-x load-file~ 

#+caption: This is the most simple init.el sample.
#+begin_src emacs-lisp
;; Reload init.el files by following methods
;; 1. M-x eval-buffer
;; 2. M-x load-file

(require 'package)
(setq  package-enable-at-startup nil)

;; After this setup, we will use M-x list-packages to list remote repo packages.
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))

(package-initialize)

;; This is all we needed to install a single package!
;; After [:init ...] is some customized actions after loaded package [which-key]  
(use-package which-key
  :ensure t
  :init
  (which-key-mode))

;; if this package [use-package] is not installed , then I will [refresh package content]
;; and next to [install use-package].
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))


(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
** DONE Change the font and theme                                    :BASIC:
   CLOSED: [2020-02-15 Sat 22:20]
   :PROPERTIES:
   :Effort:   0:30
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-15 Sat 10:55]--[2020-02-15 Sat 12:08] =>  1:13
   :END:
*** Q: Why haven't ~custom-set-variables~ after change default UI face ?
   - ~M-x customize~ to change UI face.
   - ~M-x customize-themes~ to change themes.
   - install *monokai-theme* .
   - Execise: install evil.
   - Execise: change melpa to cn
#+begin_src emacs-lisp
(add-to-list 'package-archives
             '(("org-cn"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
               ("org-cn"   . "http://elpa.zilongshanren.com/org/")
               ("melpa-cn" . "http://elpa.zilongshanren.com/melpa/")
               ("melpa" . "https://melpa.org/packages/")))
#+end_src
** DONE A lot of change                                              :BASIC:
   CLOSED: [2020-02-15 Sat 22:20]
   :PROPERTIES:
   :Effort:   0:30
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-15 Sat 16:20]--[2020-02-15 Sat 19:20] =>  3:00
   :END:
   - terminal 
     + ~M-x term~: /\usr/bin/zsh/
     + ~M-x anti-term~: /\/bin/bash/ 
#+begin_src emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+end_src
    + defalias
    + define key map use global-set-key.
** DONE Use orgmode to orgnize my configuration                      :BASIC:
   CLOSED: [2020-02-15 Sat 22:20]
   :PROPERTIES:
   :Effort:   0:30
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-15 Sat 20:21]--[2020-02-15 Sat 20:45] =>  0:24
   :END:
   - add-hook [[http://ergoemacs.org/emacs/emacs_whats_hook.html][What's hook?]]
   -[[http://ergoemacs.org/emacs/emacs_avoid_lambda_in_hook.html][ Emacs: Avoid Lambda in Hook]] 
   - configuration org 
** DONE ido mode                                                     :BASIC:
   CLOSED: [2020-02-15 Sat 22:20]
   :PROPERTIES:
   :Effort:   0:30
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-15 Sat 20:45]--[2020-02-15 Sat 22:15] =>  1:30
   :END:
   - move massive configuration to config.org file.
** AVY                                                               :BASIC:
   :PROPERTIES:
   :Effort:   0:20
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-16 Sun 23:08]--[2020-02-16 Sun 23:08] =>  0:00
   :END:

* Orgmode (Studing)
  :PROPERTIES:
  :ORDERED:  t
  :ID:       c12cede9-7932-4a64-a08c-6b17967390af
  :END:
  :CLOCKLOG:
  CLOCK: [2020-02-10 Mon 17:18]--[2020-02-10 Mon 17:55] =>  0:37
  :END:
** DONE E01S01 : Headlines & outline mode
   CLOSED: [2020-02-10 Mon 21:25]
   :CLOCKLOG:
   CLOCK: [2020-02-10 Mon 20:24]--[2020-02-10 Mon 20:34] =>  0:10
   :END:
   
   | Local expand/collapse cycle  | @@html:<kbd>@@ <tab> @@html:</kbd>@@       |
   | Global expand/collapse cycle | @@html:<kbd>@@ <backtab> @@html:</kbd>@@   |
   | Increase level               | @@html:<kbd>@@ <alt-right> @@html:</kbd>@@ |
   | Decrease level               | @@html:<kbd>@@ <alt-left> @@html:</kbd>@@  |
   | Move up                      | @@html:<kbd>@@ <M-up> @@html:</kbd>@@      |
   | Move down                    | @@html:<kbd>@@ <M-down> @@html:</kbd>@@    |

** DONE E01S03 : Schedule, Deadlines & Agenda views
   :CLOCKLOG:
   CLOCK: [2020-02-11 Tue 12:32]--[2020-02-11 Tue 13:32] =>  1:00
   CLOCK: [2020-02-11 Tue 12:04]--[2020-02-11 Tue 12:07] =>  0:03
   :END:
   
   | Schedule done     | @@html:<kbd>@@ C-c C-s @@html:</kbd>@@ |
   | Deadlines defined | @@html:<kbd>@@ C-c C-d @@html:</kbd>@@ |
   | Agenda switch     | @@html:<kbd>@@ C-a a @@html:</kbd>@@   |
   | Follow mode       | @@html:<kbd>@@ S-f @@html:</kbd>@@     |
   | Move forward      | @@html:<kbd>@@ f @@html:</kbd>@@       |
   | Move backward     | @@html:<kbd>@@ b @@html:</kbd>@@       |
** DONE E01S04 : Repeating tasks
   :CLOCKLOG:
   CLOCK: [2020-02-11 Tue 17:46]--[2020-02-11 Tue 18:17] =>  0:31
   :END:

   | regular every week (d=day w=weak m=month y=year) | +1w  |
   | repeat every week, definitely in the future      | ++1w |
   | Next 4 week after the task is DONE               | .+4w |

   If repeated event was setting by SCHEDULED @@html:<kbd>@@ C-c C-t
   @@html:</kbd>@@ , you could press @@html:<kbd>@@ C-c C-t @@html:</kbd>@@
   again to change current SCHEDULED event to state DONE and restart a new
   SCHEDULED event.

*** 规律重复出现的时间戳       
    如每天下午 5 点跑步，每周六去公园玩，每年的生日等。
    *d* 表示 day， *w* 表示 week ， *m* 表示 month。
** DONE E01S05 : Checklists [2/4]
   :PROPERTIES:
   :Effort:   0:20
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-12 Wed 08:14]--[2020-02-12 Wed 08:31] =>  0:17
   :END:
   
  - [ ] This is checklist
  - [ ] New checklist by @@html:<kbd>@@ <M-S-return> @@html:</kbd>@@
  - [X] You can see the completion of the checklist with [0/0] or [0%] on headlines.
  - [X] Checkbox toggled with @@html:<kbd>@@ C-c C-c @@html:</kbd>@@ 
** DONE E02S01 : Tags                                                :BASIC:
   :PROPERTIES:
   :Effort:   0:10
   :CUSTOM_ID: tagsid
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-12 Wed 08:41]--[2020-02-12 Wed 08:59] =>  0:18
   :END:

   Tags can be added to headlines and are often used as a way to mark GTD contexts.

   Tags can be predefined with a line ~#+TAGS:PHONE(o) ...~ at the beginning of
   the file. Use @@html:<kbd>@@ C-c C-q @@html:</kbd>@@ to assign a tags for a
   headline. Use @@html:<kbd>@@ <tab> @@html:</kbd>@@ to enter new tags instead
   of predefined tags. Clear tags by @@html:<kbd>@@ SPC @@html:</kbd>@@ .

** DONE E02S02 : Agenda view (advanced)                              :BASIC:
   :PROPERTIES:
   :Effort:   0:20
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-12 Wed 09:33]--[2020-02-12 Wed 09:44] =>  0:11
   :END:
   
   | Timeline for current buffer          | @@html:<kbd>@@ L @@html:</kbd>@@ |
   | List all TODO entries                | @@html:<kbd>@@ t @@html:</kbd>@@ |
   | Entries with a special TODO Keywords | @@html:<kbd>@@ T @@html:</kbd>@@ |
   | Match tags/propoerties/TODO keywords | @@html:<kbd>@@ M @@html:</kbd>@@ |
   | Like before, but only TODO keywords  | @@html:<kbd>@@ M @@html:</kbd>@@ |
   | Search for keywords                  | @@html:<kbd>@@ s @@html:</kbd>@@ |
   
** DONE E02S03 : Customized Agenda view
   :PROPERTIES:
   :Effort:   0:20
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-12 Wed 09:46]--[2020-02-12 Wed 09:55] =>  0:09
   :END:
   
   for customizing agenda command 
** DONE E02S04 : Drawers,Logging & quick notes                    :ADVANCED:
   :PROPERTIES:
   :Effort:   0:20
   :END:
   - Note taken on [2020-02-12 Wed 10:14] \\
     test quick notes
   :CLOCKLOG:
   CLOCK: [2020-02-12 Wed 09:57]--[2020-02-12 Wed 10:30] =>  0:33
   :END:
 
   I want to add quick notes. If you want ~:LOGBOOK:~ appeared in the body, you
   must customize ~org-log-into-drawer~.
   
  :HiddenNote:
  We could create *DRAWER* by @@html:<kbd>@@ C-c C-x d @@html:</kbd>@@ .
  :END:
 
   :DRAWER:
   - This is the usually *hidden* content of drawer
   - The drawer ends with the line that says :END:
   - Reserved drawer names are e.g. :LOGBOOK: or :PROPERTIES:
   :END:
   ~:LOGBOOK:~ don't display in the ouput html files!? 

    This is the source orgfiles
#+begin_src orgmode
   :LOGBOOK:
   - Note taken on [2020-02-12 Wed 10:25] \\
     After customize ~org-log-into-drawer~, I could get quick notes into body.
   - Note taken on [2020-02-12 Wed 10:09] \\
     This is a quick notes using @@html:<kbd>@@ C-c C-z @@html:</kbd>@@ . That's good!
   :END:
#+end_src

   :LOGBOOK:
   - Note taken on [2020-02-12 Wed 15:36] \\
     You can use ~#+OPTIONS: d:t~ to show drawer.
   - Note taken on [2020-02-12 Wed 10:25] \\
     After customize ~org-log-into-drawer~, I could get quick notes into body.
   - Note taken on [2020-02-12 Wed 10:09] \\
     This is a quick notes using @@html:<kbd>@@ C-c C-z @@html:</kbd>@@ . That's good!
   :END:
   
** DONE E02S05 : Archiving                                          :FUTURE:
   :PROPERTIES:
   :Effort:   0:20
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-12 Wed 10:45]--[2020-02-12 Wed 10:57] =>  0:12
   :END:
   Finished tasks collected up your org file. Define a global archives file with
   ~#+ARCHIVE: myarchive.org::~.
   - Archive an entry with @@html:<kbd>@@ C-c C-x C-a @@html:</kbd>@@ .
   - Archive a subtree with @@html:<kbd>@@ C-c C-x C-s @@html:</kbd>@@ .

   When you complete you task, you can move out of your DONE tasks to archives files.

** DONE E03S01 : Automatic logging of status changes                :FUTURE:
   CLOSED: [2020-02-16 Sun 23:18]
   :PROPERTIES:
   :Effort:   0:20
   :END:
   :LOGBOOK:
   - State "DONE"       from "WAITING"    [2020-02-16 Sun 23:18] \\
     I had done the lesson after 3 days.
   - State "WAITING"    from "TODO"       [2020-02-16 Sun 23:17]
   - State "TODO"       from "DONE"       [2020-02-16 Sun 23:15] \\
     Test log something when I start to do sth.
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-16 Sun 23:08]--[2020-02-16 Sun 23:14] =>  0:06
   CLOCK: [2020-02-12 Wed 10:58]--[2020-02-16 Sun 23:08] => 108:10
   :END:
   automatic logging of status changes for complicated tasks. I think I will
   never use this feature.
   - Customized ~org-log-done~ .
   - ~org-log-reschedule~ when reschedule log a note and a timestamp.
** DONE E03S02 : Splitting your system up to several files          :FUTURE:
   CLOSED: [2020-02-17 Mon 00:03]
   :PROPERTIES:
   :Effort:   0:20
   :END:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-02-17 Mon 00:03] \\
     You can use org-refile to orgnize plan. 
     That's great !
   - State "TODO"       from "WAITING"    [2020-02-16 Sun 23:36] \\
     Begin to study this topic after frustated by complicated configuration of raw emacs.
     
     I realize that this is a long way to be a good emacser.
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-16 Sun 23:38]--[2020-02-17 Mon 00:03] =>  0:25
   CLOCK: [2020-02-12 Wed 11:08]--[2020-02-12 Wed 11:18] =>  0:10
   :END:
   
   - Goal: Instead of one file for all we want to have one for the private things
   and one for work.
   - Procedure:
     + Customize ~org-agenda-files~
     + Customize ~org-refile-targets~ 
     + Customize ~org-refile-use-outline-path~ 
     + Customize ~org-refile-allow-creating-parent-nodes~
   
  | Command      | Key                                    |
  |--------------+----------------------------------------|
  | Move entries | @@html:<kbd>@@ C-c C-w @@html:</kbd>@@ |
  | Copy entries | @@html:<kbd>@@ C-c M-w @@html:</kbd>@@ |

** WAITING E03S03 : The first capture template(s)                   :USEFUL:
   :PROPERTIES:
   :Effort:   0:20
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-12 Wed 11:21]--[2020-02-12 Wed 11:34] =>  0:13
   :END:
   
   Goal: Capturing tasks, ideas and whatever you want!

   Use @@html:<kbd>@@ SPC C c @@html:</kbd>@@ to open capture template.
** WAITING E03S04 : The  -PROPERTIES - drawer                       :FUTURE:
** WAITING E03S05 : Archiving to different files                    :FUTURE:
** WAITING E04S01 : Ordered tasks                          :ADVANCED:FUTURE:
** DONE E04S02 : Timers                                              :BASIC:
     :PROPERTIES:
     :ORDERED:  t
     :END:
     :CLOCKLOG:
     CLOCK: [2020-02-09 Sun 21:28]--[2020-02-09 Sun 21:56] =>  0:28
     CLOCK: [2020-02-09 Sun 20:40]--[2020-02-09 Sun 20:54] =>  0:14
     CLOCK: [2019-11-28 Thu 16:52]--[2019-11-28 Thu 16:58] =>  0:06
     CLOCK: [2019-11-28 Thu 16:59]--[2019-11-28 Thu 17:00] =>  0:01
     :END:
     :LOGBOOK:
     :END:

#+NAME: timerlink

     |-----------------------------+--------------------------------------------|
     | Clocking in                 | @@html:<kbd>@@ C-c C-x C-i @@html:</kbd>@@ |
     | Clocking out                | @@html:<kbd>@@ C-c C-x C-o @@html:</kbd>@@ |
     | Restart a clock             | @@html:<kbd>@@ C-c C-x C-x @@html:</kbd>@@ |
     | Jump to Clocked task        | @@html:<kbd>@@ C-c C-x C-j @@html:</kbd>@@ |
     | Cancel a Clock in           | @@html:<kbd>@@ C-c C-x C-q @@html:</kbd>@@ |
     | Show times                  | @@html:<kbd>@@ C-c C-x C-d @@html:</kbd>@@ |
     | Recompute time              | @@html:<kbd>@@ C-c C-c @@html:</kbd>@@     |
     | Start countdown timer       | @@html:<kbd>@@ C-c C-x ; @@html:</kbd>@@   |
     | Pause a timer or continue   | @@html:<kbd>@@ C-c C-x , @@html:</kbd>@@   |
     | Insert current timer        | @@html:<kbd>@@ C-c C-x . @@html:</kbd>@@   |
     | Start a relative timer      | @@html:<kbd>@@ C-c C-x 0 @@html:</kbd>@@   |
     | Calc & display spended time | @@html:<kbd>@@ C-c C-x C-d @@html:</kbd>@@ |
     | Enter Column view           | @@html:<kbd>@@ C-c C-x C-c @@html:</kbd>@@ |
     | Leave column view           | @@html:<kbd>@@ Q @@html:</kbd>@@           |
     |-----------------------------+--------------------------------------------|

** DONE E04S03 : Clocking (aka time tracking)                        :BASIC:
*** Football notes

     You'll start relative timer by @@html:<kbd>@@ C-c C-x 0 @@html:</kbd>@@
     . The timer will be tick from 00:00:01, 00:00:02, ... , 00:01:08, ....

     Suppose team A get a score at sometimes, press @@html:<kbd>@@ C-c C-x .
     @@html:</kbd>@@ to get current relative time and insert below current
     cursor.

     - 0:04:31 :: Team A scored a goal 1:0 .
     - 0:05:26 :: [When press @@html:<kbd>@@ O @@html:</kbd>@@ to get a
                  newline, insert current timer automatically.] Team B scored
                  a goal 1:1.
     [If you go out to get a dink, you could press @@html:<kbd>@@ C-c C-x , @@html:</kbd>@@ 
      to pause timer. Repeat such combination keys when coming back from outside.]
     - Stop timer by @@html:<kbd>@@ C-c C-x _ @@html:</kbd>@@
     
*** Clock Tracking example
    :CLOCKLOG:
    CLOCK: [2020-02-10 Mon 08:32]--[2020-02-10 Mon 09:13] =>  0:41
    :END:
**** Task A
     :PROPERTIES:
    :Effort:   20:00
    :END:
    :CLOCKLOG:
    CLOCK: [2020-02-10 Mon 08:58]--[2020-02-10 Mon 08:59] =>  0:01
    CLOCK: [2020-02-10 Mon 08:37]--[2020-02-10 Mon 08:40] =>  0:03
    :END:
    - Some task that we need to know how much time it take.

    Use @@html:<kbd>@@ C-c C-x TAB @@html:</kbd>@@ to insert timestamp, Use
    @@html:<kbd>@@ C-c C-x C-j @@html:</kbd>@@ to jump to the last insert
    timestamp，Use @@html:<kbd>@@ C-c C-x C-o @@html:</kbd>@@ to close
    timestamp.

**** Task B
     :CLOCKLOG:
     CLOCK: [2020-02-10 Mon 08:56]--[2020-02-10 Mon 08:58] =>  0:02
     CLOCK: [2020-02-10 Mon 08:40]--[2020-02-10 Mon 08:42] =>  0:02
     :END:
     - Some other task to clock.
    
     Use @@html:<kbd>@@ C-c C-c @@html:</kbd>@@ to recompute timer.
     Use @@html:<kbd>@@ C-c C-x C-d @@html:</kbd>@@ to calculate spended time.
     Use @@html:<kbd>@@ C-c C-c @@html:</kbd>@@ to cancel display total spended time.

** DONE E04S04 : Column view                                         :BASIC:
   :CLOCKLOG:
   CLOCK: [2020-02-10 Mon 11:45]--[2020-02-10 Mon 12:03] =>  0:18
   :END:
   
#+begin_src lisp
#+COLUMNS: %7TODO(To Do) %40ITEM(TASK) %TAGS(Tags) %6CLOCKSUM(Clock)
#+end_src

     | Enter Column view | @@html:<kbd>@@ C-c C-x C-c @@html:</kbd>@@ |
     | Leave column view | @@html:<kbd>@@ Q @@html:</kbd>@@           |
** DONE E04S05 : Effort estimates                                    :BASIC:
   :CLOCKLOG:
   CLOCK: [2020-02-10 Mon 12:05]--[2020-02-10 Mon 12:40] =>  0:35
   :END:
   
   Goal: Estimate the effort that your task will take.

   Recipe: Effort are properties stored in ~:Effort:~ . Easy setup: Define
   ~#+PROPERTIES: Effort_ALL~ .

   Add ~#+COLUMNS: %8Effort(Effort){:}~ in column view. {:} means sum up times.

| Show column view  | @@html:<kbd>@@ C-c C-x C-c @@html:</kbd>@@ |
| increase effort   | @@html:<kbd>@@ <S-right> @@html:</kbd>@@   |
| decrease effort   | @@html:<kbd>@@ <S-left> @@html:</kbd>@@    |
| Leave column view | @@html:<kbd>@@ Q @@html:</kbd>@@           |
   
** DONE E05S01 : Linking (internal)                                  :BASIC:
   :PROPERTIES:
   :Effort:   0:30
   :ID:       c03ec7fa-68c3-4259-babb-7b91739d23ac
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-13 Thu 08:35]--[2020-02-13 Thu 09:16] =>  0:41
   :END:
   Links is ~[[target][description]]~. 
   
   | Edit link               | @@html:<kbd>@@ C-c C-l @@html:</kbd>@@ |
   | Follow the link         | @@html:<kbd>@@ C-c C-o @@html:</kbd>@@ |
   | Return to previous link | @@html:<kbd>@@ C-c & @@html:</kbd>@@   |
   
   - This is a headline link to [[org-mode][HEADLINE link]] . Use @@html:<kbd>@@ C-c
     C-l @@html:</kbd>@@ to edit internal link. 
#+begin_src orgmode
 [[E01S02 : ToDo Keywords]]
#+end_src
   - This is a ~#+NAME:timerlink~ link to ~[[timerlink][NAME Link to E04S02 Timers]]~.
   - This is a ~:CUSTOM_ID:~ link to [[#tagsid][CUSTOM_ID LINK]].
   - Use ~<<<target>>>~ to create links on the fly. 
** DONE E05S02 : Linking (external)                                  :BASIC:
   :PROPERTIES:
   :Effort:   0:30
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-13 Thu 14:07]--[2020-02-13 Thu 14:21] =>  0:14
   :END:
   - Target: ~protocol:location~
   - Key: [[https://github.com/jkitchin/org-ref][Org-ref]] @@html:<kbd>@@ SPC m i l @@html:</kbd>@@
   - ~org-id-location-file~ store all ID for OrgMode.
** FAILED E05S03 : Attachments                                      :NORMAL:
   :PROPERTIES:
   :Effort:   0:20
   :ID:       7090ed5d-7325-4df1-a062-ac5a14436dc9
   :Attachments: coq-Program%20Logics%20for%20Certified%20Compilers.pdf
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-14 Fri 14:56]--[2020-02-14 Fri 15:41] =>  0:45
   :END:

   #+caption[attachments]: Attachments summarizes. The attachments are usually stored under ~./data/~ and then a structure based on the ID properties. 
   | Command     | Key                                    | Others |
   |-------------+----------------------------------------+--------|
   | attachments | @@html:<kbd>@@ C-c C-a @@html:</kbd>@@ |        |
   |             |                                        |        |

   Test! Attach a ~pdf~ file in this section.
   - @@html:<kbd>@@ C-c C-a @@html:</kbd>@@ 
   - Choice "Symbolic link" by press @@html:<kbd>@@ y @@html:</kbd>@@ .
   
** NEXT E05S04 : Priorities
** DONE E05S05 : Tables                                             :USEFUL:
   :PROPERTIES:
   :Effort:   0:30
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-13 Thu 16:02]--[2020-02-13 Thu 17:19] =>  1:17
   :END:
   
   |------------------------+--------------------------------------------+-----------------------------------------|
   | Name                   | Key                                        | Others                                  |
   |------------------------+--------------------------------------------+-----------------------------------------|
   | horizontal line        | $\vert-$ Tab                               | start from second line                  |
   | move column            | @@html:<kbd>@@ <M-right> @@html:</kbd>@@   | @@html:<kbd>@@ <M-left> @@html:</kbd>@@ |
   | delete column          | @@html:<kbd>@@ <M-S-left> @@html:</kbd>@@  |                                         |
   | insert column          | @@html:<kbd>@@ <M-S-right> @@html:</kbd>@@ |                                         |
   | delete row             | @@html:<kbd>@@ <M-S-up> @@html:</kbd>@@    |                                         |
   | insert row             | @@html:<kbd>@@ <M-S-down> @@html:</kbd>@@  |                                         |
   | insert horizontal line | @@html:<kbd>@@ C-c - @@html:</kbd>@@       |                                         |
   |------------------------+--------------------------------------------+-----------------------------------------|

   $TBLFM$ = table formula. You could use table to calculate simple formula.
   This is link to Table[[ref:tab-1][ tableRef]] .
   
   Should use org-ref defined *label:* and *ref:* to produce $\LaTeX$ reference.
   If use orgmode's *#+NAME:* will be error.

   #+CONSTANT: skbios=string("1.16.0")
   |       |        |          | current |    new |        |
   | Board | System | CPU      |    BIOS |   BIOS | action |
   |-------+--------+----------+---------+--------+--------|
   | D3427 | J550   | E3 v5    |  1.15.0 | 1.15.0 |        |
   | D3322 | M330   | Intel i5 |  1.14.0 | 1.14.0 |        |
   | D2322 | W430   | AMD i7   |  1.14.0 | 1.16.0 |        |
   #+TBLFM: $5=$skbios; ::$6=if("$5" == "$4", string(""), update);

   #+CAPTION: This is caption for table. label:tab-1
   | <r1> | <l2> | <c3> | <r4> |
   |    1 | 2    |  3   |    4 |
   |------+------+------+------|
   |    1 | 2    |  3   |    4 |
   |   11 | 22   |  33  |   44 |

** DONE E06S01 : Exporting                                    :USEFUL:BASIC:
   :PROPERTIES:
   :Effort:   0:20
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-12 Wed 15:13]--[2020-02-12 Wed 16:01] =>  0:48
   :END:
   - Goal:export files into HTML and PDF
   - Key :@@html:<kbd>@@ C-c C-e @@html:</kbd>@@ 
   - Customization: Setting ~org-file-apps~ determines the application to open files.
   
*** TODO export chinese pdf ?
    :CLOCKLOG:
    CLOCK: [2020-02-12 Wed 22:28]--[2020-02-12 Wed 23:49] =>  1:21
    :END:

   [*IMPORTANT*] I have been set how to open html files with qutebrowser and how
   to open pdf files with zathura.
   
   Add a line with ~#+OPTIONS:~ to fine tune the output, ~t~ is true.
   | Show the contents of drawer              | ~d:t~    |
   | Preserve line breaks                     | ~\n:t~   |
   | Export planing information               | ~p:t~    |
   | Include TODO keywords into exported text | ~todo:t~ |

** DONE E06S02 : Advanced exporting                                 :USEFUL:
   :PROPERTIES:
   :Effort:   0:30
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-12 Wed 16:13]--[2020-02-12 Wed 16:40] =>  0:27
   :END:
   - ~M-x customize-group~ then input  ~org-export~
   - add ~+AUTHOR~ and ~+TITLE~
   - There has many choices to export pdf!

#+begin_src orgmode
# for beamer
#+SUBTITLE: ORGMODE EXPLAINED
#+BEAMER_THEME: Berlin
#+BEAMER_FONT_THEME: professionalfonts
#+end_src

** NEXT E06S03 : Publishing
** DONE E06S04 : Dynamic blocks                                   :ADVANCED:
   :PROPERTIES:
   :Effort:   0:20
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-14 Fri 14:40]--[2020-02-14 Fri 14:56] =>  0:16
   :END:
   
   Dynamic blocks create content dynamically, such as *clocktable* and
   *columnview*. 

   | command           | key                                         | others    |
   |-------------------+---------------------------------------------+-----------|
   | Create clocktable | @@html:<kbd>@@ C-c C-x C-r @@html:</kbd>@@  | headlines |
   | Update the table  | @@html:<kbd>@@ C-c C-c @@html:</kbd>@@      |           |
   | :maxlevel 2       | two level                                   | parameter |
   | :block thismonth  | time for a month                            | parameter |
   | :step week        | time for weekly                             | parameter |
   | :tstart :tend     | :tstart "<2016-01-02>" :tend "<2018-05-03>" | parameter |

** NEXT E06S05 : Tracking habits
** NEXT E07S01 : Bulk agenda actions
** NEXT E07S02 : Presenting my system
** NEXT E07S03 : Google Calendar integration
** MORE E07S04 : Source code in OrgMode                           :ADVANCED:
   :PROPERTIES:
   :Effort:   0:30
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-14 Fri 18:55]--[2020-02-14 Fri 19:36] =>  0:41
   :END:
   + See topic [[https://orgmode.org/manual/Literal-Examples.html][Literal Examples]] .
   + The souce code language which you want to use in your writing must be
     customized by ~org-babel-load-language~ .
   + Use @@html:<kbd>@@ C-c C-, @@html:</kbd>@@ to insert source code sample
     instead of @@html:<kbd>@@ < s tab @@html:</kbd>@@ after Emacs v26.
   
| Parameters       | Meaning         |
|------------------+-----------------|
| ~:results raw~   | raw             |
| ~:results table~ | (default) table |
| ~:results list~  | list            |
| ~:results table~ | no results      |
   
#+begin_src shell :results raw
  # press C-c C-c to evaluate shell command following by adding result. 
  ls -l /tmp
#+end_src

#+begin_example
总用量 72
drwx------ 3 hxz  hxz  4096 Feb  9 19:26 2048-game-1DrVa1
drwx------ 3 hxz  hxz  4096 Feb  9 19:29 2048-game-TdBl6G
drwx------ 2 hxz  hxz  4096 Feb 14 19:24 babel-4PNIXT
-rwx------ 1 root root    0 Feb  8 12:22 com.sangfor.dns_server_op_lock
-rwx------ 1 root root    0 Feb  8 12:23 com.sangfor.lockcert
-rwx------ 1 root root    0 Feb  8 12:22 com.sangfor.lockecagent
-rw------- 1 hxz  hxz     0 Feb  8 12:23 config-err-FFkDpV
-rw-rw-r-- 1 hxz  hxz   174 Feb 10 17:54 cookie.txt
drwx------ 2 hxz  hxz  4096 Feb 14 15:46 emacs1000
-rw------- 1 hxz  hxz     0 Feb 14 19:24 emacsIZkEfj
#+end_example

C++ Coding
#+begin_src cpp
  #include <iostream>

  int main()
  {
    std::cout << "hello c++" <<std::endl;
    return 0;
  }
#+end_src

Coq coding
#+begin_src coq
Inductive day : Type :=
  | monday
  | tuesday
  | wednesday
  | thursday
  | friday
  | saturday
  | sunday.
#+end_src

** NEXT E07S05 :
* Use Emacs
** 01 - setting up the package manager
** 02 - org
** 03 - Elisp
** 04 - Buffers
** 05 - Windows
** 06 - Search (Swiper)
** 07 - Navigating with Avy
** DONE 08 - Auto-complete                                           :BASIC:
   :CLOCKLOG:
   CLOCK: [2020-02-14 Fri 09:40]--[2020-02-14 Fri 10:01] =>  0:21
   :END:

   1. Search auto-complete keys help. 
      - @@html:<kbd>@@ C-h k @@html:</kbd>@@
      - @@html:<kbd>@@ M-/ @@html:</kbd>@@
   2. See the help , then I know use 
      - @@html:<kbd>@@ M-/ @@html:</kbd>@@ 
      - @@html:<kbd>@@ C-p @@html:</kbd>@@  
** 09 - Themes
** 10 - org init file
** 11 - reveal.js and org-mode
** 12 - flycheck and Jedi for Python
** 13 - yasnippet
** 14 - Thoughts on Using Emacs
** 15 - macros
** 16 - undo tree
** 17 - Misc features
** 18 - iedit, narrowing, and widening
** 19 - moving to a live config
** 20 - yanking
** 21 - Web Mode
** 22 - emacsclient
** 24 - links
** 25 - tramp
** 26 - Google Calendar and Org Agenda (good version)
** 26 - Google Calendar sync and Org Agenda
** 27 - shell and eshell
** 28 - rectangles
** 29 - elfeed part 1
** 30 - emacs c++
** 31 - elfeed and macros
** 33 - projectile and dumb-jump
** 34 - IBuffer and Emmet mode
** 35 - blogging
** 36 - A touch of elisp
** 37 - Treemacs file view
** 38 - Dired
** DONE 39 - mu4e                                                 :ADVANCED:
   :CLOCKLOG:
   CLOCK: [2020-02-14 Fri 08:19]--[2020-02-14 Fri 09:29] =>  1:10
   CLOCK: [2020-02-13 Thu 23:10]--[2020-02-14 Fri 01:05] =>  1:55
   :END:
   
   + See the [[https://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html][Drowning in Email; mu4e to the Rescue]] . Mbsync : get release
     tarball from git. Following the next step to install
#+caption: Install mbsync
#+begin_src bash
./autogen.sh
./configure
make
sudo make install
#+end_src
   
   + Create *~/.emacs.d/.mbsyncrc* file.
   + *MUST* open QQmail IMAPAccount and use *NEW PASSWORD* to login.
   + Test IMAP server with
#+begin_src bash
mbsync -c ~/.emacs.d/.mbsyncrc -a
#+end_src

   + See the [[https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html][install mu4e in Ubuntu]] .
   + See the [[https://pengpengxp.github.io/archive/before-2018-11-10/2018-10-14-deal_with_mail_by_mbsync_mu4e_emacs.html#orgf228b24][deal_with_mail_by_mbsync_mu4e_emacs]] to setup mu4e. You can use ~mu~
     to search in your mailbox.
#+caption: Use *mu* to search mailbox.
#+begin_src bash
$ mu find from:service
Wed 15 Jan 2020 09:03:55 PM CST service@vip.ccb.com 
#+end_src

** 40 - atomic-chrome
** 41 - pandoc
** 42 - Git Gutter and Timemachine
** 43 - Music
** 44 - An Org mode and PDF-tools workflow
** SCRATCH 45 - Company or Autocomplete                              :BASIC:
   :PROPERTIES:
   :Effort:   0:30
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-14 Fri 19:55]--[2020-02-14 Fri 20:10] =>  0:15
   :END:
** 46 - auto yasnippets
** 47 - Magit
** 48 - silversearcher
** 49 - mu4e-conversation
** 50 - presentations
** 51 - day to day with org-mode
** 52 - eyebrowse
** CANCELLED 53 - emailing org-agenda                      :ADVANCED:FUTURE:
   CLOSED: [2020-02-13 Thu 18:07]
   :PROPERTIES:
   :Effort:   0:30
   :END:
   :CLOCKLOG:
   CLOCK: [2020-02-13 Thu 18:00]--[2020-02-13 Thu 18:07] =>  0:07
   :END:
** 54 - Org Tables
** 55 - C++ Irony Completions
** 56 - dictionaries
** 57 - dired-narrow
** 59 - Markdown
** TODO 62 : Magit
   :CLOCKLOG:
   CLOCK: [2020-02-11 Tue 18:28]--[2020-02-11 Tue 18:48] =>  0:20
   :END:
   
   I must learn git before using Magit.

** 63 - ClojureScript
* Git
** Git Basic 
   :CLOCKLOG:
   CLOCK: [2020-02-11 Tue 20:15]--[2020-02-11 Tue 21:47] =>  1:32
   :END:
*** in master
   1. ~git init~
   2. ~git config --global user.name 'AiPick'~
   3. ~git config --global user.emal '2585957571@qq.com'~
   4. ~git add *.*~ all files *NOT* including subdir
      ~git add .~  add all file include subdir
   5. ~git status~
   6. ~git rm --cached [uncached filename]~
   7. ~git commit -m "add readme.txt"~
   8. ~touch .gitignore~ ignore these files
*** switch to branch
   1. ~git branch mybranch~
   2. ~git checkout mybranch~
   3. ~touch branch.txt~
   4. ~git add .~
   5. ~git commit -m "branch changed"~
*** switch back to master and merge
   1. ~git chechout master~
   2. ~git merge mybranch~
*** git to remote
   1. ~git remote add origin https://github.com/AiPick/notes.git~
   2. ~git remote~
   3. ~git push -u origin master~
      input username & password
   4. refresh github pages to get pushed files and dirs
   5. ~touch newtest.txt~
   6. ~git add .~
   7. ~git commit -m "test with newtest.txt which pushed to remote"~
   8. ~git push~ before refresh github pages to get ~newtest.txt~ appeared in remote repo.
*** get newest repo
   1. ~git pull~

** magit
   :CLOCKLOG:
   CLOCK: [2020-02-13 Thu 10:44]--[2020-02-13 Thu 11:52] =>  1:08
   CLOCK: [2020-02-11 Tue 22:20]--[2020-02-11 Tue 23:20] =>  1:00
   :END:
   1. @@html:<kbd>@@ SPC g s @@html:</kbd>@@ magit status
   2. committed file @@html:<kbd>@@ s @@html:</kbd>@@
   3. committed to repo @@html:<kbd>@@ c @@html:</kbd>@@ 
   4. use @@html:<kbd>@@ , , @@html:</kbd>@@  to actually commit changed files.
   5. use @@html:<kbd>@@ p @@html:</kbd>@@ to push local repo to remote repo.
   6. use @@html:<kbd>@@ F @@html:</kbd>@@ to pull from remote repo.
   7. use @@html:<kbd>@@ e @@html:</kbd>@@ to solve conflict in Ediff. 
      use @@html:<kbd>@@ N & P @@html:</kbd>@@ to navigate between the Ediff.
      use @@html:<kbd>@@ A & B @@html:</kbd>@@ to choice what you want to reserve code.
   8. @@html:<kbd>@@ SPC g b @@html:</kbd>@@ is blame state to show different
      author comment and revised code on the timeline. You could press
      @@html:<kbd>@@ b @@html:</kbd>@@ to backtrace in the history.
   9. use @@html:<kbd>@@ f @@html:</kbd>@@ to fetch repo files cite:remy2000using .
    10.cite:kosba2016hawk 


\printbibliography[title=参考文献]
